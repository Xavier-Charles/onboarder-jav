export const flow = [
  "Cadence: smart contract programming language on Flow Blockchain",
  "Features of Cadence: type safety, strong static type system, resource-oriented programming",
  "Resource-oriented programming: secure, declarative model for digital ownership",
  "Cadence: built-in pre-conditions and post-conditions for functions and transactions",
  "Cadence: capability-based security enforcing access control",
  "Flow Developer Playground: in-browser editor and emulator for Flow experimentation",
  "Flow Playground usage: write Cadence smart contracts, deploy to local Flow blockchain, submit transactions",
  "Flow Playground: compatible with standard web browsers, optimized for Google Chrome",
  "Getting started with Playground: deploying Cadence smart contracts, interacting with transactions and scripts",
  "Flow Playground: pre-loaded with contract and transaction templates, links to tutorials",
  "Flow Playground: accounts section for active accounts and associated smart contracts",
  "Deploying contracts in Playground: select account, deploy Cadence code from editor",
  "Flow Playground: transaction and script interactions with deployed smart contracts",
  "Exploring Playground features: accounts, contracts, transactions, scripts, tutorials",
  "In this tutorial, we'll write and deploy our first smart contract!",
  "A smart contract is a computer program stored in a network like a blockchain that verifies and executes the performance of a contract.",
  "Cadence is the resource-oriented programming language for developing smart contracts on the Flow Blockchain.",
  "Our 'Hello World' smart contract will: Create and initialize a smart contract with a single field of type String.",
  "For this tutorial, you'll be using the Flow Playground, an interactive web interface that lets you write and run smart contracts in a test environment.",
  "The interfaces to this state (the ways to interact with it, otherwise known as methods or functions) are also stored in accounts.",
  "Each user has an account controlled by one or more private keys with configurable weight.",
  "The first area is the contract area. This is the area that stores smart contracts containing type definitions, fields, and functions that relate to common functionality.",
  "The second area is the account storage. This area is where an account stores the objects that they own.",
  "A Transaction in Flow is defined as an arbitrary-sized block of Cadence code that is authorized by one or more accounts.",
  "In the box at the bottom right of the editor, select Account 0x01 as the transaction signer.",
  "Congratulations, you just executed your first Cadence transaction with the account 0x01 as the signer.",
  "This tutorial covered an introduction to Cadence, including terms like accounts, transactions, and signers.",
  "Feel free to modify the smart contract to implement different functions, experiment with the available Cadence types, and write new transactions that execute multiple functions from your HelloWorld smart contract.",
  "This tutorial builds on the previous Hello World tutorial.",
  "This tutorial will build on your understanding of accounts and how to interact with them by introducing resources.",
  "Resources are one of Cadence's defining features.",
  "In Cadence, resources are a composite type like a struct or a class, but with some special rules.",
  "Resources are useful when you want to model direct ownership.",
  "Resources solve this problem by making creation, destruction, and movement of assets explicit.",
  "In this tutorial, you will: Deploy a contract that declares a resource, Save the resource into the account storage, Interact with the resource we created using a transaction.",
  "To interact with resources, you'll learn a few important concepts: Using the create keyword, The move operator <-, The Account Storage API.",
  "The move operator <- is used to move a resource into a variable.",
  "Any account can import these definitions and use them to create an object that follows the imported definition or to interact with other objects of those types.",
  "Resources are one of the most important things that Cadence introduces to the smart contract design experience.",
  "Each instance of a resource can only exist in exactly one location and cannot be copied.",
  "Resources must be explicitly moved from one location to another when accessed.",
  "Resources also cannot go out of scope at the end of function execution. They must be explicitly stored somewhere or destroyed.",
  "All composite types like contracts, resources, and structs can have an optional init() function that only runs when the object is initially created.",
  "Contracts also have read and write access to the storage of the account that they are deployed to by using the built-in self.account object.",
  "A resource can only be created in the scope that it is defined in.",
  "The @ symbol specifies that it is a resource of the type HelloAsset, which we defined in the contract.",
  "This function uses the move operator to create a resource of type HelloAsset and return it.",
  "The move operator <- replaces the assignment operator = in assignments that involve resources.",
  "When a resource is moved, the old location is invalidated, and the object moves into the context of the new location.",
  "Regular assignments of resources are not allowed because assignments only copy the value.",
  "Create Hello Transaction",
  "use a transaction",
  "createHelloAsset() function",
  "saves a HelloAsset resource",
  "account's storage",
  "transaction named Create Hello",
  "Create Hello should contain the following code",
  "create a resource, then saves the resource in account storage",
  "let newHello <- HelloWorld.createHelloAsset()",
  "acct.save(<-newHello, to: /storage/HelloAssetTutorial)",
  "log('Saved Hello Resource to account.')",
  "Import the HelloWorld definitions",
  "createHelloAsset() function to create a resource",
  "save the created resource in the account storage",
  "log the text HelloAsset created and stored to the console",
  "AuthAccount objects have many different methods",
  "save and load from /storage/",
  "create /private/ and /public/ links to the objects in /storage/",
  "verify which assets and areas of the signers' storage a transaction can modify",
  "information about transactions that wallets will be executing",
  "accessed the function createHelloAsset() from our contract",
  "save the resource to the account storage",
  "acct.save(<-newHello, to: /storage/HelloAssetTutorial)",
  "log('Saved Hello Resource to account.')",
  "Select account 0x01 as the only signer",
  "Submit the transaction",
  "Saved Hello Resource to account",
  "removing the line of code that saves newHello to storage",
  "error for newHello that says loss of resource",
  "storage spot at /storage/HelloAssetTutorial is empty",
  "executed the transaction, account 0x01 should have the newly created HelloWorld.HelloAsset resource stored in its storage",
  "Deployed Contracts",
  "HelloWorld contract and the HelloAsset resource",
  "Load Hello Transaction",
  "use a transaction",
  "hello() method",
  "HelloAsset resource",
  "transaction named Load Hello",
  "move operator and the load function from the account storage API",
  "log(helloResource?.hello())",
  "acct.save(<-helloResource!, to: /storage/HelloAssetTutorial)",
  "Import the HelloWorld definitions",
  "Moves the HelloAsset object from storage to helloResource",
  "hello() function of the HelloAsset resource",
  "Saves the resource in the account",
  "load method from the account storage API",
  "let helloResource <- acct.load<@HelloWorld.HelloAsset>(from: /storage/HelloAssetTutorial)",
  "specified type is stored under the given path",
  "function returns nothing, or nil",
  "throw an error and the transaction will fail",
  "HelloWorld.HelloAsset resource object from this path",
  "values in the storage are returned as optionals",
  "optionals represent either the presence or the absence of a value",
  "Optionals have two cases: either there is a value of the specified type, or there is nothing (nil)",
  "Optional type is declared using the ? suffix",
  "account for the possibility that the helloResource object we got with load is nil",
  "Using ? 'unwraps' the optional",
  "acct.save(<-helloResource!, to: /storage/HelloAssetTutorial)",
  "force-unwrap operator (!)",
  "Refer to Optionals In Cadence to learn more about optionals and how they are used",
  "Select account 0x01 as the only signer",
  "Submit the transaction",
  "Hello, World!",
  "Reviewing the Resource Contract",
  "introduction to resources in Cadence",
  "account storage API and interacting with resources using transactions",
  "smart contract that is accessible in all scopes",
  "function called hello() that returns the string 'Hello, World!'",
  "deployed this contract in an account",
  "transaction to create the resource in the smart contract and save it in the account 0x01",
  "transaction to move the HelloAsset resource from account storage, call the hello method, and return it to the account storage",
  "basic knowledge to write a simple Cadence program",
  "implement a resource in a smart contract",
  "Save, move, and load resources using the account storage API and the move operator <-",
  "use the prepare phase of a transaction to load resources from account storage",
  "Cadence Best Practices document",
  "Anti-patterns document",
];
